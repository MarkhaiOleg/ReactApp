{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useMemo } from 'react';\nexport const useSortedPosts = (posts, sort) => {\n  _s();\n\n  const sortedPosts = useMemo(() => {\n    if (sort) {\n      return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]));\n    }\n\n    return posts;\n  }, [sort, posts]);\n  return sortedPosts;\n};\n\n_s(useSortedPosts, \"JCOM6shKwCo6CttVuNVxaNMnTKM=\");\n\nexport const usePots = (posts, sortf, query) => {\n  _s2();\n\n  const sortedPosts = useSortedPosts(posts, sort);\n  const sortedAndSearchedPosts = useMemo(() => {\n    return sortedPosts.filter(post => post.title.toLowerCase().includes(query.toLowerCase()));\n  }, [query, sortedPosts]);\n  return sortedAndSearchedPosts;\n};\n\n_s2(usePots, \"1Y9f2rPptY4OI22k1qpnp57b6n0=\", false, function () {\n  return [useSortedPosts];\n});","map":{"version":3,"sources":["/Users/anymacstore/Desktop/myProgects/first-react-app/src/components/hooks/usePost.js"],"names":["useMemo","useSortedPosts","posts","sort","sortedPosts","a","b","localeCompare","usePots","sortf","query","sortedAndSearchedPosts","filter","post","title","toLowerCase","includes"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAAA;;AAC3C,QAAMC,WAAW,GAAGJ,OAAO,CAAC,MAAM;AAC9B,QAAIG,IAAJ,EAAU;AACN,aAAO,CAAC,GAAGD,KAAJ,EAAWC,IAAX,CAAgB,CAACE,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACF,IAAD,CAAD,CAAQI,aAAR,CAAsBD,CAAC,CAACH,IAAD,CAAvB,CAA1B,CAAP;AACH;;AAAC,WAAOD,KAAP;AACL,GAJ0B,EAIxB,CAACC,IAAD,EAAOD,KAAP,CAJwB,CAA3B;AAMA,SAAOE,WAAP;AACH,CARM;;GAAMH,c;;AAUb,OAAO,MAAMO,OAAO,GAAG,CAACN,KAAD,EAAQO,KAAR,EAAeC,KAAf,KAAyB;AAAA;;AAC5C,QAAMN,WAAW,GAAGH,cAAc,CAACC,KAAD,EAAQC,IAAR,CAAlC;AAEA,QAAMQ,sBAAsB,GAAGX,OAAO,CAAC,MAAM;AACzC,WAAOI,WAAW,CAACQ,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACC,KAAL,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCN,KAAK,CAACK,WAAN,EAAlC,CAA3B,CAAP;AACH,GAFqC,EAEnC,CAACL,KAAD,EAAQN,WAAR,CAFmC,CAAtC;AAIA,SAAOO,sBAAP;AACH,CARM;;IAAMH,O;UACWP,c","sourcesContent":["import { useMemo } from 'react';\n\nexport const useSortedPosts = (posts, sort) => {\n    const sortedPosts = useMemo(() => {\n        if (sort) {\n            return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]))\n        } return posts;\n    }, [sort, posts])\n\n    return sortedPosts;\n}\n\nexport const usePots = (posts, sortf, query) => {\n    const sortedPosts = useSortedPosts(posts, sort)\n\n    const sortedAndSearchedPosts = useMemo(() => {\n        return sortedPosts.filter(post => post.title.toLowerCase().includes(query.toLowerCase()))\n    }, [query, sortedPosts])\n\n    return sortedAndSearchedPosts;\n}\n\n"]},"metadata":{},"sourceType":"module"}